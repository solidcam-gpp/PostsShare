;W508MT - Fanuc 31i-A5
;SolidCAM 2020DV
;20/04/2019
;michael.vinetsky@solidcam.com
;rev 001 - support of @plane_data
;rev 002 - U axis position by function

@init_post
	;Formats
	global string move_axis_x_f move_axis_y_f move_axis_z_f move_axis_a_f move_axis_b_f xh_move_f yh_move_f zh_move_f ah_move_f bh_move_f bpos_f spin_f
	global string move_extr_axis_L1_f move_extr_axis_L2_f move_extr_axis_L3_f move_extr_axis_R1_f move_extr_axis_R2_f move_extr_axis_R3_f program_number_f
	;Strings
	global string StrMachineType;Turning/milling
	global string StrDeviceType;Device name
	global string ArStrAxesNames<<16>>;Array of axes names
	;Integers
	global integer IntHomeIndexSh;Shadow of used home
	global integer IntMachineMode;G8xx code of machine
	global integer IntHeadPosition;Position of back spindle code
	global integer IntHomeNumber;Current home number
	global integer IntBrakeStatus<<6>>;The status of spindles brakes
	global integer IntToolChangeMode;Tool change strategy code
	global integer IntCurrentTool;Shadow of tool_number
	global integer IntITrace_level;Debug
	global integer IntITraceCounter;Debug
	global integer ArNumAxesMove<<16>>;Axes positions array
	global integer IntUsedHomes;Number of mac transformations for home data
	global integer IntPlaneDatas;Number of @plane_data routines
	;Numerics
	global numeric NumHeadAngle;BS Head angular position
	global numeric NumJpos;Jaws open position
	global numeric ArNumPlaneData<<50,4>>;array of home data
	;Logicals
	global logical LogInMCO;Inside MCO flag
	global logical LogInFaceCartesian;Cartesian enabled flag
	global logical LogInRadialPolar;Polar enabled Flag
	global logical LogIn4xTransform;4x transform enabled flag
	global logical LogDrillRadial;Drill Radial enabled flag
	global logical LogInTorqueCheck;Transfer with trque check flag
	global logical LogInsynh;Spindles are synchronized flag
	global logical LogBarFeederFlag;Bar feeding flag
	global logical ArLogAxesBits<<16>>;Axes change bits array
	global logical LogUsePartCoordinate;Full RTCP enabled parameter
	;Init vars
	program_number_f 	= '<O>z4.0(p)'
	numeric_def_f   	= '5.3'
	integer_def_f  	 	= '5.0(p)'
	gcode_f         	= '<G>3.1(p)'
	mcode_f         	= '<M>3.1(p)'
	feed_f          	= '< F>4.3(p)'
	spin_f				= '4.3(p)'
	blknum_gen			= FALSE
	blknum_max			= 99999999
	xopos_f 			= '< X>5.3(p)'
	yopos_f 			= '< Y>5.3(p)'
	zopos_f 			= '< Z>5.3(p)'
	xlpos_f 			= '< X>5.3(p)'
	ylpos_f 			= '< Y>5.3(p)'
	zlpos_f 			= '< Z>5.3(p)'
	xpos_f 				= '< X>5.3(p)'
	ypos_f 				= '< Y>5.3(p)'
	zpos_f 				= '< Z>5.3(p)'
	apos_f 				= '< A>5.3(p)'
	bpos_f 				= '< B>5.3(p)'
	IntBrakeStatus<<2>> = True ;MV
	IntBrakeStatus<<1>> = True ;MV
	;Debug
	if IntITraceCounter eq 0
		IntITraceCounter = 1
		Input "Trace level : 0-None  5-All", IntITrace_level
		trace "all":IntITrace_level
	endif
	;Post parameters
	LogUsePartCoordinate = true ; IF yes part coordinate (G841) with OPOS set will be generate, if no Table coordinate (G843) with HPOS
endp

@start_of_file
	call @UdrGeneralFormats(('milling'))
	{nb,'%'}
	{nl, program_number}
	if index_split_file eq 1
		{'(',upper(part_name),')'}
	else
		{'(',upper(split_name),')'}
	endif
	{nb,'(W508MT)'}
	{nb,'(FOR SC2020DV ONLY)'}
endp

@start_program
	call @UdrAxesHoming(('_Z_YXBU'))
	{nb,'M370'}
endp

@end_program
	call @UdrAxesHoming(('_Z_YXBU'))
	NumHeadAngle = 90
	call @UdrGetMachineType((5))
	{nb,IntHeadPosition:mcode_f}
	{nb,'M801'}
	{nb,'M30'}
endp 

@end_of_file
	{nl,'%'}
endp

@def_tool
	{nl, '(OUTIL 'tool_number, ' - 'tool_message')'}
endp

@Ud_Turn_change_tool
	if LogInMCO eq true
		call @UdrMCOTurnChangeTool
	else
		call @UdrGeneralFormats(('turning'))
		call @UdrToolChangeStrategy
	{nb,nb,'(TOOL ',tool_number,')'}
	{nb,IntToolChangeMode:gcode_f,' '}
	skipline = false
	call @UdrHomeNumber((1))
	{tool_number:'< T>2.0(p)'}
		if tool_offset_number eq tool_number  
	tool_offset_number = 11
	endif  
	{' H',tool_offset_number,machine_b_value:bpos_f,xnext:xpos_f,ynext:ypos_f,znext:zpos_f}
	if StrDeviceType ne 'Tail stock'
		call @UdrGetUPosition
	endif
	spin = spin * (spin_direction * 2 - 1) * -1
		if spin_unit eq css
			{' V'spin,' S',spin_limit}
		else
			{' S',spin}
		endif
		{' R5',' P',next_tool_number,' M8'}
	endif
	call @UdrHomeNumber((1))
endp

@UdrGetUPosition
	local string sAxis
	local numeric nUpos
	sAxis = 'U'
	nUpos = get_axis_value_before_job(index_job,sAxis)
	{' U'nUpos}
endp

@UdrMCOTurnChangeTool
	call @UdrGeneralFormats(('turning'))
	call @UdrToolChangeStrategy
	{nb,nb,'(TOOL ',tool_number,')'}
	{nb,IntToolChangeMode:gcode_f,' '}
	skipline = false
	call @UdrHomeNumber((1))
	{tool_number:'< T>2.0(p)'}
	if tool_offset_number eq tool_number  
		tool_offset_number = 11
	endif   
	{' H',tool_offset_number,machine_b_value:bpos_f,xtool:xopos_f,ytool:yopos_f,ztool:zopos_f}
	{anext:apos_f}
	if StrDeviceType ne 'Tail stock'
		call @UdrGetUPosition
	endif
	if spin_unit eq css
		spin = spin * (spin_direction * 2 - 1) * -1
		{' V',spin,' S',spin_limit:spin_f}
	else
		{' S',spin}
	endif
	{' R5',' P',next_tool_number,' M8'}
endp

@UdrToolChangeStrategy
	if tool_number ne IntCurrentTool
		IntToolChangeMode = IntMachineMode + 6
		IntCurrentTool = tool_number
	else
		IntToolChangeMode = IntMachineMode + 2
	endif	
endp

@ud_change_tool
	call @UdrGeneralFormats(('milling'))
	call @UdrToolChangeStrategy
	if submachine_ID eq 5
		bnext = anext
		anext = 0
	endif
	spin = spin * (tool_direction * 2 - 1) * -1
	{nb,nb,'N',tool_number}
	{nl, '(OUTIL 'tool_number, ' - 'tool_message')'}
	{nb,IntToolChangeMode:gcode_f' '}
	skipline = false
	call @UdrHomeNumber((1))
	{tool_number:'<T>2.0(p)'}
	if job_h_offset eq tool_number  
		job_h_offset = 11
	endif  
	{' H',job_h_offset,bnext:bpos_f}
	if X5_job eq false
		if rot_axis_type ne axis4_none	
			{xonext:xopos_f,yonext:yopos_f,zonext:zopos_f}
		else
			{xnext:xpos_f,ynext:ypos_f,znext:zpos_f}
		endif
	else
		if LogUsePartCoordinate eq TRUE
			{xonext:xopos_f,yonext:yopos_f,zonext:zopos_f}
		else
			{xhnext:xhpos_f,yhnext:yhpos_f,zhnext:zhpos_f}
		endif
	endif
	{anext:apos_f}
	if StrDeviceType ne 'Tail stock'
		call @UdrGetUPosition
	endif
	{' S'spin}
	if X5_job eq true
		{' R0'}
	else
		{' R5'}
	endif
	{' P',next_tool_number,' M8'}
endp

@start_of_job
	{nb,'M01'}
	if LogIn4xTransform ne true
		if job_machine_type eq turning
			call @ud_turn_change_tool
		else
			call @ud_change_tool
		endif
		{nb,'M120'}
	endif
	if job_machine_type eq turning
		call @UdrMachinePlane((18))	
	else
		if rot_axis_type eq axis4_none
			call @UdrMachinePlane((17))
		else
			if rot_axis_type eq axis4_radial
				LogDrillRadial = true
			endif
			call @UdrBrake((0)(IntBrakeStatus<<3>>),submachine_ID,(1)(0))
			if rot_axis_type eq axis4_face
				call @UdrMachinePlane((17))
			else
				call @UdrMachinePlane((18))
			endif
		endif
	endif
	if X5_job eq true
		call @UdrBrake((0)(0),submachine_ID,(1)(1))
		if LogUsePartCoordinate eq TRUE
			{nb,'G841'};use Opos set
			if submachine_ID eq 4  ; Working on BS Horizontal
				{' C0'}
				bpos_f = '< B>5.3(p)'
			elseif submachine_ID eq 6 ; Working on BS Horizontal
				{' C90'}
			endif
		else
			{nb,'G843'};use hpos set
			if submachine_ID eq 4  ; Working on BS Horizontal
				{' C0'}
				bpos_f = '< B>5.3(p)'
			elseif submachine_ID eq 6 ; Working on BS Horizontal
				{' C90'}
			endif
		endif
		{nb,'G5.1 Q1 R5'}
		{nb,'G43.4 H'job_h_offset}
	endif
endp

@end_of_job
	if X5_job eq true
		call @UdrBrake((1)(1),submachine_ID,(0)(0))
		{nb,'G49'}
		{nb,'G849'};use hpos/opos set off
	endif
	if rot_axis_type ne axis4_none
		call @UdrBrake((1)(IntBrakeStatus<<3>>),submachine_ID,(0)(0))
	endif
endp

@line
	gcode = 1
	{nb,[gcode],[xpos],[ypos],[zpos],[feed]}
endp

@rapid_move
	gcode = 0
	{nb,[gcode],[xpos],[ypos],[zpos]}
endp

@arc
	gcode = 2+arc_direction
	{nb,[gcode],[xpos],[ypos],[zpos]}	
	{' R'radius, [feed]}
endp

@fourth_axis
	gcode = 0
	{nb,gcode,tool_z_level:zpos_f}
	call @UdrBrake((0)(IntBrakeStatus<<3>>),submachine_ID,(0)(0))
	{nb,gcode,first_axis_angle:apos_f}
	call @UdrBrake((1)(IntBrakeStatus<<3>>),submachine_ID,(0)(0))
	if fourth_axis_last ne 1
		LogIn4xTransform = true
	else
		LogIn4xTransform = false
	endif
endp 

@UdrFaceCartesian(logical a)
	if a eq true
		gcode = 112
		{nb,gcode}
		LogInFaceCartesian = true
	else
		if LogInFaceCartesian eq true
			gcode = 113
			{nb,gcode}
			LogInFaceCartesian = false
		endif
	endif
endp

@compensation
	gcode = 42-side
	{nb,gcode,' ' }
	skipline = false
endp

@UdrMachinePlane(numeric a)
	if machine_plane eq XY
		gcode = 17
	endif
	if machine_plane eq ZX
		gcode = 18
	endif
	if machine_plane eq YZ
		gcode = 19
	endif
	if rot_axis_type eq axis4_radial
		gcode = 19
	endif
	if a ne 0
		gcode = a
	endif
	{nb,gcode}
endp

@UdrRadialCartesian(logical a)
	if LogInRadialPolar eq false and a eq true
		gcode = 107
		{nb,gcode,(radial_diameter/2):apos_f}
		LogInRadialPolar = true
	endif
	if LogInRadialPolar eq true and a eq false
		gcode = 107
		apos = 0
		{nb,gcode,apos}
		LogInRadialPolar = false
	endif
endp

@start_mach_ctrl
	LogInMCO = true
	LogBarFeederFlag = true
endp

@start_obj_act
	call @UdrAxisNames
	call @UdrGetMachineType(submachine_ID)
endp

@dwell
	{nb,'G4 F'dwell_time:'6.0(*1000p)'}
endp 

@UdrSaveMoves
	ArNumAxesMove<<1>> = move_extr_axis_L1
	ArNumAxesMove<<2>> = move_extr_axis_L2
	ArNumAxesMove<<3>> = move_extr_axis_L3
	ArNumAxesMove<<4>> = move_extr_axis_R1
	ArNumAxesMove<<5>> = move_extr_axis_R2
	ArNumAxesMove<<6>> = move_extr_axis_R3
	ArNumAxesMove<<7>> = move_axis_a
	ArNumAxesMove<<8>> = move_axis_b
	ArNumAxesMove<<9>> = move_axis_x
	ArNumAxesMove<<10>> = move_axis_y
	ArNumAxesMove<<11>> = move_axis_z
	ArNumAxesMove<<12>> = move_axis_a
	ArNumAxesMove<<13>> = move_axis_b
	ArNumAxesMove<<14>> = move_axis_x
	ArNumAxesMove<<15>> = move_axis_y
	ArNumAxesMove<<16>> = move_axis_z
endp

@move_object
	local integer i axv axu axj axf
	local logical uax vax jax fax
	i = 0
	call @UdrSaveMoves
	call @UdrModalityCheck
	if DeviceName ne 'Embarreur'
		while i lt 16
			i = i + 1
			if ArStrAxesNames<<i>> eq 'V' and ArLogAxesBits<<i>> eq true
				vax = true
				axv = i
				ArLogAxesBits<<i>> = false
			endif
			if ArStrAxesNames<<i>> eq 'U' and ArLogAxesBits<<i>> eq true
				uax = true
				axu = i
			endif
			if ArStrAxesNames<<i>> eq 'Jaws' and ArLogAxesBits<<i>> eq true
				jax = true
				axj = i
				ArLogAxesBits<<i>> = false
			endif
			if ArStrAxesNames<<i>> eq 'X10' and ArLogAxesBits<<i>> eq true
				fax = true
				axf = i
				ArLogAxesBits<<i>> = false
			endif
		endw
		if jax eq true
			call @UdrCloseOpenJaws((ArNumAxesMove<<axj>>))
		else
			if MCO_CoordSysType eq 1
				if vax eq true
					NumHeadAngle = ArNumAxesMove<<axv>>
					call @UdrGetMachineType(submachine_ID)
					{nb,IntHeadPosition:mcode_f}
				endif
				call @UdrHommingDetect
			else
				call @UdrHomeNumber((1))
				skipline = false
				gcode = 1-is_rapid_move
				{nb,[gcode],[xh_move],[yh_move],[zh_move],[ah_move],[bh_move]}
			endif
			if is_rapid_move ne true
				if StrDeviceType eq 'Tail stock'
					{[feed_move:feed_f]}
				else
					{[' G94'feed_move:feed_f]}
				endif
			endif
		endif	
	else
		if LogBarFeederFlag eq true
			if fax eq true
				{nb,'M60 X'ArNumAxesMove<<axf>>:'5.3(p)',' S'bound_z_max}
			endif
			LogBarFeederFlag = false
		endif
	endif
endp

@UdrCloseOpenJaws(numeric J_pos)
	if NumJpos gt J_pos
		open_close = 0
	endif
	if NumJpos lt J_pos
		open_close = 1
	endif
	call @open_close_obj
	NumJpos = J_pos
endp

@open_close_obj
	if DeviceName eq 'Mors_etau'
		if open_close eq 1
			{nb,'M189'}
		else
			{nb,'M188'}
		endif
	endif
	if DeviceName eq 'Broche principale'
		if open_close eq 1
			{nb,'M63'}
		else
			{nb,'M61'}
		endif
	endif
	if DeviceName eq 'Contre broche'
		if open_close eq 1
			{nb,'M53'}
		else
			{nb,'M51'}
		endif
	endif
endp

@end_mach_ctrl
	LogInMCO = false
endp

@UdrHomeNumber(logical force)
	if IntHomeIndexSh ne IntHomeNumber or force eq 1
		gcode = 53+ArNumPlaneData<<plane_data_ID,4>>
		{nb,gcode' '}
	endif
	IntHomeIndexSh = IntHomeNumber
endp

@spin
	local integer a a1
	if spin_direction eq 3 ;OFF
		a = 5
	endif
	if spin_direction eq 1 ;CW
		a = 3
	endif
	if spin_direction eq 2 ;CCW
		a = 4
	endif
	if DeviceName eq 'Axe B'
		mcode = a
	endif
	if DeviceName eq 'Broche principale'
		mcode = 10 + a
	endif
	if DeviceName eq 'Contre broche' 
		mcode = 80 + a
	endif
	if LogInsynh eq true
		if a eq 3
			a1 = 4
		elseif a eq 4
			a1 = 3
		endif
	if spin_direction eq 3 ;OFF
		a1 = a
	endif
		{nb,'M'(10+a),' M',(80+a1)}
		if spin_direction ne 3
			{' S'spin_rate}
		endif
		{nb,'M86'}
		 LogInsynh = false
	else
		{nb,mcode}
		if spin_direction ne 3
			{' S'spin_rate}
		endif
	endif
endp

@spindle_orient
	if DeviceName eq 'Axe B'
		mcode = 19
		{nb,mcode}
		{nb,'G0 W',ValSpindleOrientation}
	endif
	if DeviceName eq 'Broche principale'
		MCO_Working_Mode = 1
		call @working_mode
		{nb,'G0 A',ValSpindleOrientation}
	endif
	if DeviceName eq 'Contre broche' 
		MCO_Working_Mode = 1
		call @working_mode
		{nb'G0 C',ValSpindleOrientation}
	endif
endp

@axes_sync
	if axis_sync_type eq 'R'
		if axes_sync_status eq 1
			if axis_sync_master eq 'C' and axis_sync_slave eq 'A' or axis_sync_master eq 'A' and axis_sync_slave eq 'C'
				{nb,'M88'}	
			endif
		endif
	endif
endp

@spindles_sync
	if sync_spindle eq 1
		;{nb,'M86'}
		LogInsynh = True
	endif
endp 

@check_toruqe
	local integer q
	if StrDeviceType eq 'Tail stock'
		q = 1
	else
		q = 0
	endif
	if max_torque_limit ne 0
		{nb,'G911 Q',q,' C',max_torque_limit}
		LogInTorqueCheck = true
	else
		{nb,'G911'}
		LogInTorqueCheck = false
	endif
endp

@working_mode
	if MCO_Working_Mode eq 1
		if DeviceName eq 'Broche principale'
			mcode = 39
		endif
		if DeviceName eq 'Contre broche'
			mcode = 89
		endif
		{nb,mcode}
	else
		spin_direction = 0
		call @spin
	endif
endp

@message
	{nb,'(',message,')'}
endp

@change_ref_point
	if LogInMCO eq true
		;??
	else
		{nb,'G92 X'xhome' Y',yhome,' Z'zhome}
	endif
endp

@plane_data
	IntPlaneDatas = IntPlaneDatas + 1
	local logical a
	a = false
	call @UdrPlaneDataStore(a)
	if a eq true
		{nb,'G10 L2 P'ArNumPlaneData<<plane_data_ID,4>>:'5.0(p)', ' X',shift_mac_m_x,' Y',shift_mac_m_y,' Z'shift_mac_m_z,' A0 B0 U0 (G',(53+ArNumPlaneData<<plane_data_ID,4>>),')'}
	endif
endp

;workaround, instead MAC_ID SOL-8189
@UdrPlaneDataStore(logical SetHome)
	local integer i
	local logical a
	i = 0
	a = false
	SetHome = false
	while i < IntPlaneDatas
		i = i + 1
		if 	ArNumPlaneData<<i,1>> eq shift_mac_m_x and ArNumPlaneData<<i,2>> eq shift_mac_m_y and ArNumPlaneData<<i,3>> eq shift_mac_m_z
			ArNumPlaneData<<plane_data_ID,4>> = ArNumPlaneData<<i,4>>
			a = true
			break
		endif
	endw
	if a eq false
		IntUsedHomes = IntUsedHomes + 1
		ArNumPlaneData<<plane_data_ID,4>> = IntUsedHomes
		SetHome = true
		a = false
	endif
	ArNumPlaneData<<plane_data_ID,1>> = shift_mac_m_x
	ArNumPlaneData<<plane_data_ID,2>> = shift_mac_m_y
	ArNumPlaneData<<plane_data_ID,3>> = shift_mac_m_z
endp

@machine_stop
	{nb,'M0'} 
endp

@machine_opt_stop
	{nb,'M1'} 
endp

@mco_message
	if ActionName ne 'Misc'
		call @message
	else
		{nb,message}
	endif
endp 

@unload_tool
	{nb,'M6 T0'}
endp

@UdrBrake(logical a logical b integer ID logical fa logical fb);1on/2mill/0off,  force, machine type, spindle)
	if ID eq 3 or ID eq 4 or ID eq 6
		if IntBrakeStatus<<2>> ne a or fa eq true
			if a eq 1
				{nb,'M75'}
			elseif a eq 0
				{nb,'M74'}
			endif
			IntBrakeStatus<<2>> = a
		endif
	endif
	if ID eq 1 or ID eq 2
		if IntBrakeStatus<<1>> ne a or fa eq true
			if a eq 1
				{nb,'M73'}
			elseif a eq 0
				{nb,'M72'}
			endif
			IntBrakeStatus<<1>> = a
		endif
	endif
	if IntBrakeStatus<<3>> ne b or fb eq true
		if b eq 1
			{nb,'M71'}
		elseif b eq 2
		elseif b eq 0
			{nb,'M70'}
		endif
		IntBrakeStatus<<3>> = b
	endif
endp

@UdrGeneralFormats(string a)
	call @UdrGetMachineType(submachine_ID)
	if a eq 'milling'
		xpos_f = '< X>5.3(p)'
	else
		xpos_f = '< X>5.3(p*2)'
	endif
endp 	
 
@UdrGetMachineType(integer ID)
	StrDeviceType = 'Custom angle'
	if abs(NumHeadAngle) eq 180
		IntHeadPosition = 370
		StrDeviceType = 'BS in rest'
	endif
	if NumHeadAngle eq 270 or NumHeadAngle eq 90
		IntHeadPosition = 372
		StrDeviceType = 'BS vertical'
	endif
	if NumHeadAngle eq 0
		IntHeadPosition = 371
		StrDeviceType = 'BS horizontal'
	endif
	if NumHeadAngle eq 280 or NumHeadAngle eq 80
		IntHeadPosition = 373
		StrDeviceType = 'Vice up'
	endif
	if NumHeadAngle eq 190 or NumHeadAngle eq 170
		IntHeadPosition = 374
		StrDeviceType = 'Vice down'
	endif
	if NumHeadAngle eq 100 or NumHeadAngle eq 260
		IntHeadPosition = 375
		StrDeviceType = 'Tail stock'
	endif
	if StrDeviceType eq 'Custom angle'
		call @udrB1CustomAngle(NumHeadAngle)
	endif
	if ID eq 1;ms
		StrMachineType = 'Turning'
		IntMachineMode = 800
	endif
	if ID eq 2;ms mill
		StrMachineType = 'Milling'
		IntMachineMode = 800
	endif
	if ID eq 3 
		StrMachineType = 'Turning'
		if StrDeviceType eq 'BS vertical'
			IntMachineMode = 810
		endif
		if StrDeviceType eq 'BS horizontal'
			IntMachineMode = 820
		endif
	endif
	if ID eq 4 or ID eq 6;bs mill
		StrMachineType = 'Milling'
		if StrDeviceType eq 'BS vertical'
			IntMachineMode = 810
		endif
		if StrDeviceType eq 'BS horizontal'
			IntMachineMode = 820
		endif
	endif
	if ID eq 5;vice
		StrMachineType = 'Milling'
		if StrDeviceType eq 'Vice up'
			IntMachineMode = 820
		endif
		if StrDeviceType eq 'Vice down'
			IntMachineMode = 810
		endif
	endif
endp

@udrB1CustomAngle(numeric a)
	{nb,'rotate to custom angle'};no idea now to do it
endp

@UdrAxesHoming(string axes); _XY_Z_CB
	local integer i 
	local string order<<10>>
	while i le strlen(axes)
		i=i+1
		if instr(axes,'_',i) ne 0
			order<<instr(axes,'_',i)>> = 'G53'
		endif
	endw
	i=0
	if instr(axes,'X') ne 0
		order<<instr(axes,'X')>> = ' X0'
	endif
	if instr(axes,'Y') ne 0
		order<<instr(axes,'Y')>> = ' Y0'
	endif
	if instr(axes,'Z') ne 0
		order<<instr(axes,'Z')>> = ' Z0'
	endif
	if instr(axes,'A') ne 0
		order<<instr(axes,'A')>> = ' A0'
	endif
	if instr(axes,'C') ne 0
		order<<instr(axes,'C')>> = ' C0'
	endif
	if instr(axes,'B') ne 0
		order<<instr(axes,'B')>> = ' B0'
	endif
	if instr(axes,'U') ne 0
		order<<instr(axes,'U')>> = ' U270'
	endif
	while i le strlen(axes)
		i=i+1
		if order<<i>> eq 'G53'
			{nb}
		endif
		{order<<i>>}
	endw
endp

@UdrAxisNames
	move_extr_axis_L1_f = '< '+name_extr_axis_L1+'>5.3'
	move_extr_axis_L2_f = '< '+name_extr_axis_L2+'>5.3'
	move_extr_axis_L3_f = '< '+name_extr_axis_L3+'>5.3'
	move_extr_axis_R1_f = '< '+name_extr_axis_R1+'>5.3'
	move_extr_axis_R2_f = '< '+name_extr_axis_R2+'>5.3'
	move_extr_axis_R3_f = '< '+name_extr_axis_R3+'>5.3'
	move_axis_x_f = '< '+name_axis_x+'>5.3'
	move_axis_y_f = '< '+name_axis_y+'>5.3'
	move_axis_z_f = '< '+name_axis_z+'>5.3'
	move_axis_a_f = '< '+name_axis_a+'>5.3'
	move_axis_b_f = '< '+name_axis_b+'>5.3'
	xh_move_f = '< '+name_axis_x+'>5.3'
	yh_move_f = '< '+name_axis_y+'>5.3'
	zh_move_f = '< '+name_axis_z+'>5.3'
	ah_move_f = '< '+name_axis_a+'>5.3'
	bh_move_f = '< '+name_axis_b+'>5.3'
	ArStrAxesNames<<1>> = name_extr_axis_L1
	ArStrAxesNames<<2>> = name_extr_axis_L2
	ArStrAxesNames<<3>> = name_extr_axis_L3
	ArStrAxesNames<<4>> = name_extr_axis_R1
	ArStrAxesNames<<5>> = name_extr_axis_R2
	ArStrAxesNames<<6>> = name_extr_axis_R3
	ArStrAxesNames<<7>> = name_axis_a
	ArStrAxesNames<<8>> = name_axis_b
	ArStrAxesNames<<9>> = name_axis_x
	ArStrAxesNames<<10>> = name_axis_y
	ArStrAxesNames<<11>> = name_axis_z
	ArStrAxesNames<<12>> = name_axis_a
	ArStrAxesNames<<13>> = name_axis_b
	ArStrAxesNames<<14>> = name_axis_x
	ArStrAxesNames<<15>> = name_axis_y
	ArStrAxesNames<<16>> = name_axis_z
endp

@UdrModalityCheck
	change(move_extr_axis_L1) = userDef_ExtL1
	change(move_extr_axis_L2) = userDef_ExtL2
	change(move_extr_axis_L3) = userDef_ExtL3
	change(move_extr_axis_R1) = userDef_ExtR1
	change(move_extr_axis_R2) = userDef_ExtR2
	change(move_extr_axis_R3) = userDef_ExtR3
	change(move_axis_a) =  userDef_a
	change(move_axis_b) =  userDef_b
	change(move_axis_x) =  userDef_x
	change(move_axis_y) =  userDef_y
	change(move_axis_z) =  userDef_z
	change(ah_move) =  userDef_a
	change(bh_move) =  userDef_b
	change(xh_move) =  userDef_x
	change(yh_move) =  userDef_y
	change(zh_move) =  userDef_z 
	ArLogAxesBits<<1>> = userDef_ExtL1
	ArLogAxesBits<<2>> = userDef_ExtL2
	ArLogAxesBits<<3>> = userDef_ExtL3
	ArLogAxesBits<<4>> = userDef_ExtR1
	ArLogAxesBits<<5>> = userDef_ExtR2
	ArLogAxesBits<<6>> = userDef_ExtR3
	ArLogAxesBits<<7>> =  userDef_a
	ArLogAxesBits<<8>> =  userDef_b
	ArLogAxesBits<<9>> =  userDef_x
	ArLogAxesBits<<10>> =  userDef_y
	ArLogAxesBits<<11>> =  userDef_z
	ArLogAxesBits<<12>> =  userDef_a
	ArLogAxesBits<<13>> =  userDef_b
	ArLogAxesBits<<14>> =  userDef_x
	ArLogAxesBits<<15>> =  userDef_y
	ArLogAxesBits<<16>> =  userDef_z 
endp

@UdrPrintMove
	{[move_extr_axis_L1],[move_extr_axis_L2],[move_extr_axis_L3],[move_extr_axis_R1],[move_extr_axis_R2],[move_extr_axis_R3]}
	{[move_axis_x],[move_axis_y],[move_axis_z],[move_axis_a],[move_axis_b]}
endp

@UdrHommingDetect
	local string let
	local logical ChangeBit
	local integer i
	let = '_'
	i = 0
	while i lt 11
		i = i + 1
		if ArLogAxesBits<<i>> eq true and ArNumAxesMove<<i>> eq 0
			let = let+ArStrAxesNames<<i>>
			ArLogAxesBits<<i>> = false
		endif
	endw
	if let ne '_'
		call @UdrAxesHoming(let); _XY_Z_CB
	endif
	i = 0
	ChangeBit = false
	while i lt 11
		i = i + 1
		if ArLogAxesBits<<i>> eq true
			ChangeBit = true
		endif
	endw
	if ChangeBit eq true
		if LogInTorqueCheck eq true
			if StrDeviceType ne 'Tail stock'
				{nb,'G1'}
			endif
			call @UdrPrintMove
		else
			{nb,'G53'}
			call @UdrPrintMove
		endif
	endif
endp

@line_5x
	gcode = 1
	if X5_job eq true
		if LogUsePartCoordinate eq TRUE
			{nb,[gcode],[xopos],[yopos],[zopos],[apos],[bpos],[feed]}
		else
			{nb,[gcode],[xhpos],[yhpos],[zhpos],[apos],[bpos],[feed]}
		endif
	else
		{nb,[gcode],[xopos],[yopos],[zopos],[apos],[feed]}
	endif
endp
	
@move_5x
	gcode = 0
	if X5_job eq true
		if LogUsePartCoordinate eq TRUE
			{nb,[gcode],[xopos],[yopos],[zopos],[apos],[bpos]}
		else
			{nb,[gcode],[xhpos],[yhpos],[zhpos],[apos],[bpos]}
		endif
	else
		{nb,[gcode],[xopos],[yopos],[zopos],[apos]}
	endif
endp
	
@arc_5x
	gcode = 2+arc_direction
	if X5_job eq true
		if LogUsePartCoordinate eq TRUE
			{nb,[gcode],[xopos],[yopos],[zopos],[apos],[bpos]}
		else
			{nb,[gcode],[xhpos],[yhpos],[zhpos],[apos],[bpos]}
		endif
		{' R'radius, [feed]}
	else
		{nb,[gcode],[xopos],[yopos],[zopos],[apos],[bpos]}	
		{' R'radius, [feed]}
	endif
endp

@drill
	if X5_job eq false
		gcode = 0
		if rot_axis_type eq axis4_none and LogDrillRadial eq false
			{nb,[gcode],xpos,ypos,zpos}
		else
			if LogDrillRadial eq true
				{nb,gcode,xopos,apos,zopos}
			else
				{nb,gcode,xopos,apos,zopos}
			endif
		endif	
	else
		{nb,gcode,xlpos,zlpos}	
	endif
	call @UdrBrake((1)(IntBrakeStatus<<3>>),submachine_ID,(0)(0))
	if rot_axis_type eq axis4_radial or LogDrillRadial eq true
		if drill_type eq Drilling or drill_type eq Peck
				gcode = 87
		endif
		if drill_type eq Tapping 
			skipline = false
			gcode = 88
		endif
		if drill_type eq Boring
			gcode = 89
		endif
		{nb,gcode,drill_lower_zo:xopos_f,' R',((drill_upper_zo+safety)*2)}
	endif
	if rot_axis_type eq axis4_none and X5_job eq false
		if drill_type eq Drilling
			gcode = 81
		endif
		if drill_type eq Peck
			gcode = 83
		endif
		if drill_type eq Tapping 
			gcode = 84
		endif
		if drill_type eq Boring
			gcode = 85
		endif	
		{nb,gcode,' Z',drill_lower_z,' R',(drill_upper_z+safety)}
	endif
	if X5_job eq true
		if drill_type eq Drilling
			gcode = 81
		endif
		if drill_type eq Peck
			gcode = 83
		endif
		if drill_type eq Tapping 
			gcode = 84
		endif
		if drill_type eq Boring
			gcode = 85
		endif
		{nb,gcode,' Z',drill_lower_zl,' R',(drill_upper_zl+safety)}
	endif
	if drill_type eq Peck
		if down_step gt 0
			{' Q'down_step}
		endif
	endif
	if drill_type eq Tapping
		{' F'tool_drill_lead}
	else
		{feed}
	endif
endp

@drill_point
	if first_drill eq false
		if rot_axis_type eq axis4_none and LogDrillRadial eq false
			{nb,[xpos],[ypos]}
		else
			if LogDrillRadial eq true
				{nb,[zopos],[apos]}	
			else
				if rot_axis_coord eq axis4_polar
					if rot_axis_type eq axis4_radial
						{nb,[zopos],[apos]}		
					else
						{nb,[xopos],[apos]}
					endif
				endif
			endif
		endif
	endif
endp

@turn_drill
	gcode = 74
	{nb,gcode,' Z',drill_lower_z}
	if down_step eq 0
		down_step = abs(drill_depth)
	endif
	{' Q',down_step:'5.0(*1000p)'}
	{feed}
endp

@end_drill
	{nb,'G80'}
	LogDrillRadial = false
endp

@drill_plane
	call @UdrBrake((1)(1),submachine_ID,(0)(0))
	{nb,'G49'}
	{nb,'G849'};use hpos/opos set off
	if rotate_plane_off eq false
		{nb,'G68.2 X0 Y0 Z0 I90 J'second_axis_angle' K-90'}
		{nb,'G53.1'}
		{nb,'G43 H'job_h_offset}
	else
		{nb,'G69'}
		call @UdrBrake((0)(0),submachine_ID,(1)(1))
		if LogUsePartCoordinate eq TRUE
			{nb,'G841'};use Opos set
			if submachine_ID eq 4; Working on BS Horizontal
				{' C0'}
			elseif submachine_ID eq 6; Working on BS Horizontal
				{' C90'}
			endif
		else
			{nb,'G843'};use hpos set
			if submachine_ID eq 4; Working on BS Horizontal
				{' C0'}
			elseif submachine_ID eq 6; Working on BS Horizontal
				{' C90'}
			endif
		endif
		{nb,'G5.1 Q1 R5'}
		{nb,'G43.4 H'job_h_offset}
	endif
endp
